# Import necessary modules
import csv
from epss_api import EPSS

# EPSS probabilities retrieval function (modified for robustness)
def epss_retrieval(cve):
    """Retrieves EPSS probabilities for a given CVE, handling errors.

    Args:
        cve (str): The CVE identifier.

    Returns:
        dict: A dictionary containing the EPSS probabilities if successful,
              or None if an error occurs.
    """

    try:
        # Create an EPSS object
        epss_cli = EPSS()

        # Get the probabilities
        probabilities = epss_cli.epss(cve)

        return probabilities
    except Exception as e:
        print(f"Error retrieving probabilities for {cve}: {e}")
        return None

# Function to clean rows and output to a file
def clean_rows(input_file, output_file):
    """Reads rows from an input CSV, keeps unique rows, and writes them to an output file.

    Args:
        input_file (str): Path to the input CSV file.
        output_file (str): Path to the output CSV file.
    """

    unique_rows = set()

    with open(input_file, "r") as csvfile:
        reader = csv.reader(csvfile)

        with open(output_file, "w") as outputfile:
            writer = csv.writer(outputfile)

            # Write CSV header (ensure it includes header for additional column)
            first_row = next(reader)
            first_row.append("EPSS Probabilities")
            writer.writerow(first_row)

            for row in reader:
                row_tuple = tuple(row)
                if row_tuple not in unique_rows:
                    unique_rows.add(row_tuple)
                    writer.writerow(row)

# Function to add EPSS data to a file
def add_epss_data(cleaned_file, output_file):
    """Adds EPSS probabilities to each row in a CSV file and writes to a new file.

    Args:
        cleaned_file (str): Path to the CSV file with unique rows.
        output_file (str): Path to the output CSV file with EPSS data added.
    """

    with open(cleaned_file, "r") as csvfile:
        reader = csv.reader(csvfile)

        with open(output_file, "w") as outputfile:
            writer = csv.writer(outputfile)

            # Write CSV header (ensure it's compatible with reader output)
            writer.writerow(next(reader))

            for row in reader:
                cve = row[0]
                probabilities = epss_retrieval(cve)

                if probabilities:
                    # Add probabilities to the row
                    row.append(probabilities)
                else:
                    # Handle cases where probabilities are unavailable
                    print(f"Warning: Error retrieving probabilities for CVE: {cve}")
                    row.append("Error retrieving data")

                writer.writerow(row)

# Usage example
input_csv = "cve.csv"
cleaned_csv = "cleaned_cve.csv"
output_csv = "cve_epss.csv"

# Clean rows and write them to a separate file
clean_rows(input_csv, cleaned_csv)

# Add EPSS data to the cleaned file
add_epss_data(cleaned_csv, output_csv)

print(f"Output file with EPSS data: {output_csv}")
